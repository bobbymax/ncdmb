<?php

namespace App\Services;

use App\Engine\Puzzle;
use App\Repositories\SettingRepository;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

class SettingService extends BaseService
{
    public function __construct(SettingRepository $settingRepository)
    {
        parent::__construct($settingRepository);
    }

    public function rules($action = "store"): array
    {
        $rules = [
            'key' => 'required|string',
            'value' => 'nullable|string',
            'details' => 'nullable|string',
            'input_type' => 'required|string|max:255',
            'input_data_type' => 'required|string|max:255',
            'access_group' => 'required|string|in:public,admin',
        ];

        if ($action == "store") {
            $rules['key'] .= '|unique:settings,key';
        }

        return $rules;
    }

    public function store(array $data)
    {
        return parent::store([
            ...$data,
            'key' => 'jolt_' . Str::snake($data['key']),
            'name' => $data['key'],
        ]); // TODO: Change the autogenerated stub
    }

    public function updateConfiguration(array $data)
    {
        return DB::transaction(function () use ($data) {
            foreach ($data as $key => $value) {
                $setting = $this->repository->getRecordByColumn('key', $key);

                if ($setting) {

                    $stringValue = $this->convertValueToString($value, $setting->input_data_type);

                    $setting->value = $setting->input_type === "file" ? Puzzle::scramble($stringValue, Auth::user()->staff_no) : $value;
                    $setting->save();
                }
            }

            return true;
        });
    }

   public function update(int $id, array $data, $parsed = true)
   {
       return DB::transaction(function () use ($id, $data, $parsed) {
           $setting = $this->repository->find($id);

           if (!$setting) {
               return null;
           }

           $parsedName = 'jolt_' . Str::snake($data['key']);

           $setting->update([
               ...$data,
               'key' => $data['key'] !== $setting->key ? $parsedName : $setting->key,
               'name' => $data['key'] !== $setting->key ? $data['key'] : $setting->name,
           ]);
       });
   }

    /**
     * Convert value back to string based on data type
     */
    private function convertValueToString($value, $dataType)
    {
        return match ($dataType) {
            'object', 'array' => json_encode($value),
            'boolean' => $value,
            default => (string)$value,
        };
    }
}
